// <auto-generated />
using Common.Enums;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(SkillWarsContext))]
    [Migration("20180408103007_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Common.Entity.LobbieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountPlayers");

                    b.Property<double>("Bet");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Map");

                    b.Property<string>("Password");

                    b.Property<DateTime>("StartingTime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("Common.Entity.NotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Text");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Common.Entity.SuggestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("Deadline");

                    b.Property<string>("Description");

                    b.Property<int>("Earned");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsDone");

                    b.Property<int>("Price");

                    b.Property<int>("Priority");

                    b.Property<int>("ProgressPercents");

                    b.Property<DateTime>("PublishingTime");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("Common.Entity.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LobbieId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("LobbieId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Common.Entity.TokenEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Common.Entity.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Balance");

                    b.Property<string>("Email");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsPasswordSet");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<int>("Language");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("Role");

                    b.Property<string>("SteamId");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Common.Entity.UserNotificationsEntity", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("NotificationId");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotificationsEntity");
                });

            modelBuilder.Entity("Common.Entity.SuggestionEntity", b =>
                {
                    b.HasOne("Common.Entity.UserEntity", "User")
                        .WithMany("Suggestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Common.Entity.TeamEntity", b =>
                {
                    b.HasOne("Common.Entity.LobbieEntity", "Lobbie")
                        .WithMany("Teams")
                        .HasForeignKey("LobbieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Common.Entity.TokenEntity", b =>
                {
                    b.HasOne("Common.Entity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Common.Entity.UserEntity", b =>
                {
                    b.HasOne("Common.Entity.TeamEntity", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Common.Entity.UserNotificationsEntity", b =>
                {
                    b.HasOne("Common.Entity.NotificationEntity", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Common.Entity.UserEntity", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
